# -*- coding: utf-8 -*-
"""Fernando Dashboard_Olimpiadas_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H9ngJHq5RurN0m7pObKzTUYgMeKTFeGC

# Nova seção
"""

#Passo 1 -> Lendo os dados e realizando o tratamento
!pip install dash dash_core_components dash_html_components plotly
import pandas as pd
import plotly.express as px
import dash
import dash_core_components as dcc
import dash_html_components as html

# Load the CSV file
df=pd.read_csv('Summer_olympic_Medals.csv')
# Replace 'United States' with 'United States of America' in the 'Country_Name' column
df['Country_Name'] = df['Country_Name'].replace('United States', 'United States of America')

df

#Passo 2: Plotando gráfico de Mapa

# Filtre os dados entre 1992 e 2020
df = df [( df['Year'] >= 1992) & ( df ['Year'] <= 2020)]

# Calcula o total de medalhas para cada país
df [ 'Total_Medals' ] = df [ 'Gold' ] + df [ 'Silver' ] + df [ 'Bronze' ]
df_country_medals = df.groupby('Country_Name')['Total_Medals'].sum().reset_index()

# Gera um mapa gráfico
map_fig = px.choropleth(df_country_medals,
                    locations= 'Country_Name' ,      # Coluna DataFrame com nomes de países
                    locationmode= 'country names' ,
                    color= 'Total_Medals' ,          # Coluna DataFrame com valores de cor
                    hover_name= 'Country_Name' ,     # Coluna DataFrame hover info
                    color_continuous_scale=px.colors.sequential.YlOrRd,   # Defina a escala de cores
                    title= 'Total de medalhas de 1992 a 2020' )   # Título do enredo
map_fig.show()

df

#Passo 3 -> Plotando gráfico de área dos 10 paises com maior número de medalhas

# Crie um gráfico de área empilhado para os 10 principais países por contagem total de medalhas
top_countries = df_country_medals.groupby('Country_Name')['Total_Medals'].sum().nlargest(10).index
top_countries

df_countries = df.groupby(['Country_Name', 'Year'])['Total_Medals'].sum().reset_index()
df_countries

df_top_10_countries = df_countries[df_countries['Country_Name'].isin(top_countries)]
df_top_10_countries

area_fig = px.area(df_top_10_countries,
                   x= "Year" ,
                   y= "Total_Medals",
                   color= "Country_Name",
                   title= 'Top 10 Países por contagem total de medalhas de 1992 a 2020' )

area_fig.show()

# Crie um aplicativo Dash
app = dash.Dash(__name__)


# Defina o layout
app.layout = html.Div(children=[
    dcc.Graph(figure=map_fig),
    dcc. Graph(figure=area_fig)
])

# Execute o aplicativo
if __name__ == '__main__' :
    app.run( debug = False )  # Changed from app.run_server to app.run

#Passo 4 -> Plotando gráfico de Barra com os 10 paises com maior número de medalhas de ouro

# Crie um gráfico de área empilhado para os 10 principais países por contagem total de medalhas
df_top_countries_gold = df.groupby('Country_Name')['Gold'].sum().nlargest(10).reset_index()
df_top_countries_gold

# Create a bar chart for the top 10 countries with most gold medals

bar_fig = px.bar(df_top_countries_gold, x='Country_Name', y='Gold', title='Top 10 Countries with Most Gold Medals from 1992 to 2020')
bar_fig.show()

#Passo 5 -> Estilazando a tela com color_discrete_sequence = gold

bar_fig = px.bar(df_top_countries_gold, x='Country_Name', y='Gold', color_discrete_sequence=['gold'], title='Top 10 Countries with Most Gold Medals from 1992 to 2020')
bar_fig.show()

# Create a Dash Application
app = dash.Dash(__name__)

# Define the layout
app.layout = html.Div([
    dcc.Graph(figure=map_fig, id='map'),
    html.Div([
        dcc.Graph(figure=area_fig, id='area-chart'),
        dcc.Graph(figure=bar_fig, id='bar-chart')
    ], style={'display': 'flex'})
])


# Execute o aplicativo
if __name__ == '__main__' :
    app.run(debug = False)  # Changed from app.run_server to app.run

#Passo 5 -> Estizando a tela com ajuste do mapa dentro do container div

# Create a Dash Application
app = dash.Dash(__name__)

app.layout = html.Div([
    dcc.Graph(figure=map_fig, id='map', style={'height': '50vh', 'width': '100%'}),
    html.Div([
        dcc.Graph(figure=area_fig, id='area-chart'),
        dcc.Graph(figure=bar_fig, id='bar-chart')
    ], style={'display': 'flex'})
])

# Execute o aplicativo
if __name__ == '__main__' :
    app.run(debug = False)  # Changed from app.run_server to app.run

"""# trabalho

"""

from dash.dependencies import Input, Output

# Crie a aplicação Dash
app = dash.Dash(__name__)

# Lista única de países para o dropdown
countries = df['Country_Name'].unique()
countries.sort()

# Layout com dropdown + gráfico de pizza
app.layout = html.Div([
    html.H1("Distribuição de Medalhas por País", style={'textAlign': 'center'}),

    dcc.Dropdown(
        id='country-dropdown',
        options=[{'label': c, 'value': c} for c in countries],
        value='United States of America',
        placeholder="Selecione um país",
        style={'width': '50%', 'margin': 'auto'}
    ),

    dcc.Graph(id='pie-chart')
])


# Callback para atualizar o gráfico de pizza
@app.callback(
    Output('pie-chart', 'figure'),
    Input('country-dropdown', 'value')
)
def update_pie_chart(selected_country):
    filtered_df = df[df['Country_Name'] == selected_country]
    total_gold = filtered_df['Gold'].sum()
    total_silver = filtered_df['Silver'].sum()
    total_bronze = filtered_df['Bronze'].sum()

    fig = px.pie(
        names=['Ouro', 'Prata', 'Bronze'],
        values=[total_gold, total_silver, total_bronze],
        title=f'Medalhas de {selected_country} (1992–2020)',
        color_discrete_sequence=['gold', 'silver', 'peru']
    )
    return fig


# Execute o app
if __name__ == '__main__':
    app.run(debug=False)

from dash.dependencies import Input, Output

app = dash.Dash(__name__)

# Layout com seletor de tipo de medalha
app.layout = html.Div([
    html.H1("Visualização de Medalhas Olímpicas", style={'textAlign': 'center'}),

    html.Div([
        html.Label("Selecione o tipo de medalha:"),
        dcc.RadioItems(
            id='medal-type',
            options=[
                {'label': 'Todos', 'value': 'Total'},
                {'label': 'Ouro', 'value': 'Gold'},
                {'label': 'Prata', 'value': 'Silver'},
                {'label': 'Bronze', 'value': 'Bronze'}
            ],
            value='Total',
            labelStyle={'display': 'inline-block', 'margin-right': '10px'}
        )
    ], style={'textAlign': 'center', 'padding': '20px'}),

    dcc.Graph(id='map-graph', style={'height': '50vh'}),
    html.Div([
        dcc.Graph(id='area-graph'),
        dcc.Graph(id='bar-graph')
    ], style={'display': 'flex'})
])


# Callback para atualizar os 3 gráficos com base no tipo de medalha
@app.callback(
    Output('map-graph', 'figure'),
    Output('area-graph', 'figure'),
    Output('bar-graph', 'figure'),
    Input('medal-type', 'value')
)
def update_graphs(medal_type):
    # Filtrar os dados entre 1992 e 2020
    df_filtered = df[(df['Year'] >= 1992) & (df['Year'] <= 2020)].copy()

    if medal_type == 'Total':
        df_filtered['Value'] = df_filtered['Gold'] + df_filtered['Silver'] + df_filtered['Bronze']
        title_suffix = 'Total de Medalhas'
    else:
        df_filtered['Value'] = df_filtered[medal_type]
        title_suffix = f'Medalhas de {medal_type}'

    # Gráfico de Mapa
    df_country = df_filtered.groupby('Country_Name')['Value'].sum().reset_index()
    map_fig = px.choropleth(df_country,
                            locations='Country_Name',
                            locationmode='country names',
                            color='Value',
                            hover_name='Country_Name',
                            color_continuous_scale=px.colors.sequential.YlOrRd,
                            title=f'{title_suffix} por País (1992–2020)')

    # Gráfico de Área
    top_countries = df_country.sort_values('Value', ascending=False).head(10)['Country_Name']
    df_area = df_filtered[df_filtered['Country_Name'].isin(top_countries)]
    df_area = df_area.groupby(['Country_Name', 'Year'])['Value'].sum().reset_index()

    area_fig = px.area(df_area,
                       x='Year',
                       y='Value',
                       color='Country_Name',
                       title=f'{title_suffix} - Top 10 Países (1992–2020)')

    # Gráfico de Barras
    df_bar = df_filtered.groupby('Country_Name')['Value'].sum().nlargest(10).reset_index()
    bar_fig = px.bar(df_bar,
                     x='Country_Name',
                     y='Value',
                     color='Country_Name',
                     title=f'Top 10 Países com mais {title_suffix}',
                     color_discrete_sequence=px.colors.qualitative.Set3)

    return map_fig, area_fig, bar_fig


# Execute o app
if __name__ == '__main__':
    app.run(debug=False)  # Changed from app.run_server to app.run

from dash.dependencies import Input, Output

app = dash.Dash(__name__)

# Obtemos os anos únicos da base de dados (entre 1992 e 2020)
olympic_years = sorted(df[(df['Year'] >= 1992) & (df['Year'] <= 2020)]['Year'].unique())

# Layout
app.layout = html.Div([
    html.H1("Visualização de Medalhas Olímpicas", style={'textAlign': 'center'}),

    html.Div([
        html.Label("Selecione o tipo de medalha:"),
        dcc.RadioItems(
            id='medal-type',
            options=[
                {'label': 'Todos', 'value': 'Total'},
                {'label': 'Ouro', 'value': 'Gold'},
                {'label': 'Prata', 'value': 'Silver'},
                {'label': 'Bronze', 'value': 'Bronze'}
            ],
            value='Total',
            labelStyle={'display': 'inline-block', 'margin-right': '10px'}
        )
    ], style={'textAlign': 'center', 'padding': '10px'}),

    html.Div([
        html.Label("Selecione o ano olímpico (País sede):"),
        dcc.Dropdown(
            id='year-dropdown',
            options=[{'label': str(year), 'value': year} for year in olympic_years],
            value=2020,
            clearable=False,
            style={'width': '30%', 'margin': 'auto'}
        )
    ], style={'textAlign': 'center', 'padding': '10px'}),

    dcc.Graph(id='map-graph', style={'height': '50vh'}),
    html.Div([
        dcc.Graph(id='area-graph'),
        dcc.Graph(id='bar-graph')
    ], style={'display': 'flex'})
])


# Callback para atualizar os gráficos
@app.callback(
    Output('map-graph', 'figure'),
    Output('area-graph', 'figure'),
    Output('bar-graph', 'figure'),
    Input('medal-type', 'value'),
    Input('year-dropdown', 'value')
)
def update_graphs(medal_type, selected_year):
    df_filtered = df[(df['Year'] >= 1992) & (df['Year'] <= 2020)].copy()

    if medal_type == 'Total':
        df_filtered['Value'] = df_filtered['Gold'] + df_filtered['Silver'] + df_filtered['Bronze']
        title_suffix = 'Total de Medalhas'
    else:
        df_filtered['Value'] = df_filtered[medal_type]
        title_suffix = f'Medalhas de {medal_type}'

    # Gráfico de Mapa
    df_country = df_filtered.groupby('Country_Name')['Value'].sum().reset_index()
    map_fig = px.choropleth(df_country,
                            locations='Country_Name',
                            locationmode='country names',
                            color='Value',
                            hover_name='Country_Name',
                            color_continuous_scale=px.colors.sequential.YlOrRd,
                            title=f'{title_suffix} por País (1992–2020)')

    # Gráfico de Área (Top 10 países com mais medalhas no total)
    top_countries = df_country.sort_values('Value', ascending=False).head(10)['Country_Name']
    df_area = df_filtered[df_filtered['Country_Name'].isin(top_countries)]
    df_area = df_area.groupby(['Country_Name', 'Year'])['Value'].sum().reset_index()

    area_fig = px.area(df_area,
                       x='Year',
                       y='Value',
                       color='Country_Name',
                       title=f'{title_suffix} - Top 10 Países (1992–2020)')

    # Gráfico de Barras (filtrado pelo ano olímpico selecionado)
    df_year = df_filtered[df_filtered['Year'] == selected_year]
    df_bar = df_year.groupby('Country_Name')['Value'].sum().nlargest(10).reset_index()

    bar_fig = px.bar(df_bar,
                     x='Country_Name',
                     y='Value',
                     color='Country_Name',
                     title=f'{title_suffix} em {selected_year}',
                     color_discrete_sequence=px.colors.qualitative.Set3)

    return map_fig, area_fig, bar_fig


# Execute o app
if __name__ == '__main__':
    app.run(debug=False)  # Changed from app.run_server to app.run

"""# Nova seção"""

import pandas as pd
import plotly.express as px
import dash
from dash import dcc, html
from dash.dependencies import Input, Output

# Leitura e tratamento da base de dados
df = pd.read_csv('Summer_olympic_Medals.csv')
df['Country_Name'] = df['Country_Name'].replace('United States', 'United States of America')
df = df[(df['Year'] >= 1992) & (df['Year'] <= 2020)]

# Lista de países e anos disponíveis
countries = sorted(df['Country_Name'].unique())
years = sorted(df['Year'].unique())

# Inicializa o app
app = dash.Dash(__name__)

# Layout do app
app.layout = html.Div([
    html.H1("Medalhas Olímpicas - Dashboard Interativo", style={'textAlign': 'center'}),

    # Filtros
    html.Div([
        html.Label("Tipo de Medalha:"),
        dcc.RadioItems(
            id='medal-type',
            options=[
                {'label': 'Todos', 'value': 'Total'},
                {'label': 'Ouro', 'value': 'Gold'},
                {'label': 'Prata', 'value': 'Silver'},
                {'label': 'Bronze', 'value': 'Bronze'}
            ],
            value='Total',
            labelStyle={'display': 'inline-block', 'margin-right': '15px'}
        )
    ], style={'textAlign': 'center', 'padding': '10px'}),

    html.Div([
        html.Label("Ano Olímpico:"),
        dcc.Dropdown(
            id='year-dropdown',
            options=[{'label': str(y), 'value': y} for y in years],
            value=2020,
            style={'width': '200px'}
        )
    ], style={'display': 'inline-block', 'margin-left': '5%', 'margin-bottom': '20px'}),

    html.Div([
        html.Label("País (para gráfico de pizza):"),
        dcc.Dropdown(
            id='country-dropdown',
            options=[{'label': c, 'value': c} for c in countries],
            value='United States of America',
            style={'width': '300px'}
        )
    ], style={'display': 'inline-block', 'margin-left': '5%'}),

    # Gráficos
    dcc.Graph(id='map-graph', style={'height': '50vh'}),
    html.Div([
        dcc.Graph(id='area-graph'),
        dcc.Graph(id='bar-graph')
    ], style={'display': 'flex'}),

    html.Div([
        dcc.Graph(id='pie-graph')
    ], style={'width': '40%', 'margin': 'auto'})
])


# Callback
@app.callback(
    Output('map-graph', 'figure'),
    Output('area-graph', 'figure'),
    Output('bar-graph', 'figure'),
    Output('pie-graph', 'figure'),
    Input('medal-type', 'value'),
    Input('year-dropdown', 'value'),
    Input('country-dropdown', 'value')
)
def update_graphs(medal_type, selected_year, selected_country):
    df_filtered = df.copy()

    # Criação da coluna "Value"
    if medal_type == 'Total':
        df_filtered['Value'] = df_filtered['Gold'] + df_filtered['Silver'] + df_filtered['Bronze']
        title_suffix = 'Total de Medalhas'
    else:
        df_filtered['Value'] = df_filtered[medal_type]
        title_suffix = f'Medalhas de {medal_type}'

    # Mapa
    df_map = df_filtered.groupby('Country_Name')['Value'].sum().reset_index()
    map_fig = px.choropleth(df_map,
                            locations='Country_Name',
                            locationmode='country names',
                            color='Value',
                            title=f'{title_suffix} por País (1992–2020)',
                            color_continuous_scale=px.colors.sequential.YlOrRd)

    # Área - top 10 países
    top_10 = df_map.sort_values('Value', ascending=False).head(10)['Country_Name']
    df_area = df_filtered[df_filtered['Country_Name'].isin(top_10)]
    df_area = df_area.groupby(['Country_Name', 'Year'])['Value'].sum().reset_index()
    area_fig = px.area(df_area,
                       x='Year',
                       y='Value',
                       color='Country_Name',
                       title=f'{title_suffix} - Top 10 Países (1992–2020)')

    # Barras - ano selecionado
    df_year = df_filtered[df_filtered['Year'] == selected_year]
    df_bar = df_year.groupby('Country_Name')['Value'].sum().nlargest(10).reset_index()
    bar_fig = px.bar(df_bar,
                     x='Country_Name',
                     y='Value',
                     color='Country_Name',
                     title=f'{title_suffix} - Ano {selected_year}',
                     color_discrete_sequence=px.colors.qualitative.Set3)

    # Pizza - país selecionado
    df_country = df[(df['Country_Name'] == selected_country) & (df['Year'] >= 1992) & (df['Year'] <= 2020)]
    medals = df_country[['Gold', 'Silver', 'Bronze']].sum()
    pie_fig = px.pie(names=medals.index, values=medals.values,
                     title=f'Distribuição de Medalhas de {selected_country} (1992–2020)',
                     color_discrete_map={'Gold': 'gold', 'Silver': 'silver', 'Bronze': '#cd7f32'})

    return map_fig, area_fig, bar_fig, pie_fig


# Rodar o app
if __name__ == '__main__':
    app.run(debug=False)  # Changed from app.run_server to app.run

# deploy
from dash import Dash, html

app = Dash(__name__)
server = app.server  # <- ESSENCIAL para o Render

app.layout = html.Div([
    html.H1("Olá, mundo!")
])

if __name__ == "__main__":
    app.run_server(debug=True)